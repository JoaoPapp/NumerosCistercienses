# -*- coding: utf-8 -*-
"""Cistercienses.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VTP7ruAMwwkLbWqllAsb33C0AVJDPna6
"""

# Caminhos para os caracteres básicos e o caractere a ser identificado
cisterian_paths = [
    "/0.PNG",
    "/1.PNG",
    "/2.PNG",
    "/3.PNG",
    "/4.PNG",
    "/5.PNG",
    "/6.PNG",
    "/7.PNG",
    "/8.PNG",
    "/9.PNG"
]

caractere_identificar_path = "/Desconhecido.PNG"

import cv2 as cv
import numpy as np
from google.colab.patches import cv2_imshow
from copy import deepcopy

resized_height = 100
resized_width = 100

# Função para carregar e processar os caracteres básicos
def carregar_caracteres_basicos(caminhos):
    caracteres = []
    for caminho in caminhos:
        caractere = cv.imread(caminho, cv.IMREAD_GRAYSCALE).astype(np.uint8)
        caractere = cv.resize(caractere, (resized_width, resized_height))
        caracteres.append(caractere)
    return caracteres

# Função para dividir o caractere a ser identificado em quadrantes
def dividir_em_quadrantes(caractere_identificar):
    altura, largura = caractere_identificar.shape
    quadrante_altura = altura // 2
    quadrante_largura = largura // 2
    quadrantes = []

    top_left = caractere_identificar[0:quadrante_altura, 0:quadrante_largura]
    top_right = caractere_identificar[0:quadrante_altura, quadrante_largura:largura]
    bottom_left = caractere_identificar[quadrante_altura:altura, 0:quadrante_largura]
    bottom_right = caractere_identificar[quadrante_altura:altura, quadrante_largura:largura]

    quadrantes.append(cv.resize(bottom_left, (resized_width, resized_height)).astype(np.uint8));
    quadrantes.append(cv.resize(bottom_right, (resized_width, resized_height)).astype(np.uint8));
    quadrantes.append(cv.resize(top_left, (resized_width, resized_height)).astype(np.uint8));
    quadrantes.append(cv.resize(top_right, (resized_width, resized_height)).astype(np.uint8));

    return quadrantes

def identificar_caractere_individual(candidato):
  ret = '-'
  best_score = float('inf')
  best_match = None
  caracteres_basicos = carregar_caracteres_basicos(cisterian_paths)

  for i, caractere_cisterciense in enumerate(caracteres_basicos):

    mirrored_character = np.fliplr(deepcopy(caractere_cisterciense))

    mse = np.mean((candidato - caractere_cisterciense) ** 2)
    if mse < best_score:
        best_score = mse
        best_match = i

    mse = np.mean((candidato - mirrored_character) ** 2)
    if mse < best_score:
        best_score = mse
        best_match = i


  print("Candidate Image:")
  cv2_imshow(candidato)
  print("Chosen Best Match:")
  cv2_imshow(caracteres_basicos[best_match])
  print("best_match : ", best_match, "Score: ", best_score)
  return best_match

# Função para identificar o algarismo cisterciano com base no caractere a ser identificado
def identificar_algarismo_cisterciano(caractere_identificar):
    soma = ''
    # Dividir o caractere a ser identificado em quadrantes
    quadrantes = dividir_em_quadrantes(caractere_identificar)
    for quadrante in quadrantes:
      caractere_individual = identificar_caractere_individual(quadrante)
      soma += str(caractere_individual);
    return soma

# Carregar o caractere a ser identificado

caractere_identificar = cv.imread(caractere_identificar3_path, cv.IMREAD_GRAYSCALE).astype(np.uint8)
caractere_identificar = cv.resize(caractere_identificar, (resized_width, resized_height))
cv2_imshow(caractere_identificar)

numero_identificado = identificar_algarismo_cisterciano(caractere_identificar)
print("Número Cisterciano identificado:", numero_identificado)